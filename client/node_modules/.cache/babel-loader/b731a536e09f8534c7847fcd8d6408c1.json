{"ast":null,"code":"var _jsxFileName = \"D:\\\\Desktop\\\\GIT\\\\35LGIT\\\\BruinLink\\\\client\\\\src\\\\components\\\\verificationCodeInput.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport * as config from \"../config\";\nimport $ from \"jquery\";\nimport { Box, Button, TextField } from \"@mui/material\";\nimport AlertToast from \"./alertToast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class VerificationCodeInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      coolDown: -1,\n      disableButton: false,\n      showAlert: false,\n      alertMessage: \"\"\n    };\n    this.handleSendCode = this.handleSendCode.bind(this);\n    this.countDown = this.countDown.bind(this);\n    this.timer = null;\n  }\n\n  handleSendCode() {\n    if (!this.props.checkEmailCallback(this.props.email.toString())) {\n      this.setState({\n        showAlert: true,\n        alertMessage: \"Invalid email format.\"\n      });\n      return;\n    }\n\n    let url = config.baseUrl + config.api.account.emailVerify; // TODO: wait for backend API implementation\n\n    $.post(url, {\n      email: this.props.email\n    }, function (data, status, jqXHR) {\n      console.log(data);\n      console.log(status);\n      console.log(jqXHR);\n    }, \"json\").done(() => {\n      // If request succeed, start the cool down timer.\n      this.setState({\n        coolDown: config.resendCodeCoolDown,\n        disableButton: true\n      }); // Repetitively call countDown every second\n\n      this.timer = setInterval(this.countDown, 1000); // TODO: return sessionID to parent\n    }).fail(() => {\n      // If request failed, show an error toast.\n      this.setState({\n        showAlert: true,\n        alertMessage: \"Failed to connect to the server.\"\n      });\n    });\n  }\n\n  countDown() {\n    // Reduce coolDown by 1 second\n    let remainTime = this.state.coolDown - 1;\n    this.setState({\n      coolDown: remainTime\n    });\n\n    if (remainTime <= 0) {\n      // Cool down finished!\n      clearInterval(this.timer);\n      this.setState({\n        disableButton: false\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      width: 1,\n      sx: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"flex-start\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        margin: \"normal\",\n        required: true,\n        name: \"verCode\",\n        label: \"Verification Code\",\n        onChange: this.props.onChange,\n        sx: {\n          width: \"50%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        width: \"50%\",\n        height: 1,\n        sx: {\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"center\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          margin: \"normal\",\n          variant: \"outlined\",\n          size: \"large\",\n          disabled: this.state.disableButton,\n          sx: {\n            mt: 1\n          },\n          onClick: this.handleSendCode,\n          children: this.state.coolDown <= 0 ? \"Send code\" : this.state.coolDown\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AlertToast, {\n        alertMessage: this.state.alertMessage,\n        showAlert: this.state.showAlert,\n        onClose: () => this.setState({\n          showAlert: false\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nVerificationCodeInput.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  email: PropTypes.string.isRequired,\n  checkEmailCallback: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["D:/Desktop/GIT/35LGIT/BruinLink/client/src/components/verificationCodeInput.js"],"names":["React","PropTypes","config","$","Box","Button","TextField","AlertToast","VerificationCodeInput","Component","constructor","props","state","coolDown","disableButton","showAlert","alertMessage","handleSendCode","bind","countDown","timer","checkEmailCallback","email","toString","setState","url","baseUrl","api","account","emailVerify","post","data","status","jqXHR","console","log","done","resendCodeCoolDown","setInterval","fail","remainTime","clearInterval","render","display","flexDirection","alignItems","justifyContent","onChange","width","mt","propTypes","func","isRequired","string"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as config from \"../config\";\r\nimport $ from \"jquery\";\r\nimport {Box, Button, TextField} from \"@mui/material\";\r\nimport AlertToast from \"./alertToast\";\r\n\r\nexport default class VerificationCodeInput extends React.Component {\r\n    static propTypes = {\r\n        onChange: PropTypes.func.isRequired,\r\n        email: PropTypes.string.isRequired,\r\n        checkEmailCallback: PropTypes.func.isRequired,\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            coolDown: -1,\r\n            disableButton: false,\r\n            showAlert: false,\r\n            alertMessage: \"\",\r\n        };\r\n\r\n        this.handleSendCode = this.handleSendCode.bind(this);\r\n        this.countDown = this.countDown.bind(this);\r\n        this.timer = null;\r\n    }\r\n\r\n    handleSendCode() {\r\n        if (!this.props.checkEmailCallback(this.props.email.toString())) {\r\n            this.setState({\r\n                showAlert: true,\r\n                alertMessage: \"Invalid email format.\",\r\n            });\r\n            return;\r\n        }\r\n\r\n        let url = config.baseUrl + config.api.account.emailVerify;\r\n\r\n        // TODO: wait for backend API implementation\r\n        $.post(url, {email: this.props.email}, function (data, status, jqXHR) {\r\n            console.log(data);\r\n            console.log(status);\r\n            console.log(jqXHR)\r\n        }, \"json\")\r\n            .done(() => {\r\n                // If request succeed, start the cool down timer.\r\n                this.setState({\r\n                    coolDown: config.resendCodeCoolDown,\r\n                    disableButton: true,\r\n                });\r\n\r\n                // Repetitively call countDown every second\r\n                this.timer = setInterval(this.countDown, 1000);\r\n\r\n                // TODO: return sessionID to parent\r\n            })\r\n            .fail(() => {\r\n                    // If request failed, show an error toast.\r\n                    this.setState({\r\n                        showAlert: true,\r\n                        alertMessage: \"Failed to connect to the server.\",\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    countDown() {\r\n        // Reduce coolDown by 1 second\r\n        let remainTime = this.state.coolDown - 1;\r\n        this.setState({coolDown: remainTime});\r\n\r\n        if (remainTime <= 0) {\r\n            // Cool down finished!\r\n            clearInterval(this.timer);\r\n            this.setState({\r\n                disableButton: false,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Box\r\n                width={1}\r\n                sx={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"flex-start\",\r\n                }}\r\n            >\r\n\r\n                <TextField\r\n                    margin=\"normal\"\r\n                    required\r\n                    name=\"verCode\"\r\n                    label=\"Verification Code\"\r\n                    onChange={this.props.onChange}\r\n                    sx={{width: \"50%\"}}\r\n                />\r\n\r\n                <Box width=\"50%\" height={1} sx={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\",\r\n                    justifyContent: \"center\",\r\n                }}>\r\n                    <Button\r\n                        margin=\"normal\"\r\n                        variant=\"outlined\"\r\n                        size=\"large\"\r\n                        disabled={this.state.disableButton}\r\n                        sx={{mt: 1}}\r\n                        onClick={this.handleSendCode}\r\n                    >\r\n                        {this.state.coolDown <= 0 ? \"Send code\" : this.state.coolDown}\r\n                    </Button>\r\n                </Box>\r\n\r\n                <AlertToast alertMessage={this.state.alertMessage}\r\n                            showAlert={this.state.showAlert}\r\n                            onClose={() => this.setState({showAlert: false})}/>\r\n            </Box>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}