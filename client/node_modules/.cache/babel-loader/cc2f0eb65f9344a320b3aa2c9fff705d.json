{"ast":null,"code":"var _jsxFileName = \"D:\\\\Desktop\\\\GIT\\\\35LGIT\\\\BruinLink\\\\client\\\\src\\\\components\\\\resetPasswordOverlay.js\";\nimport $ from \"jquery\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Box, Button, Container, Modal, TextField, Typography } from \"@mui/material\";\nimport { Close } from \"@mui/icons-material\";\nimport VerificationCodeInput from \"./verificationCodeInput\";\nimport * as config from \"../config\";\nimport { checkEmailFormat } from \"../utils\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport AlertToast from \"./alertToast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class ResetPasswordOverlay extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: \"\",\n      verCode: \"\",\n      newPassword: \"\",\n      verPassword: \"\"\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    // Update this.state when user-input text changes\n    let val = event.target.value;\n    let name = event.target.name;\n    this.setState({\n      [name]: val\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      open: this.props.open,\n      onClose: this.props.onClose,\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        fixed: true,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          borderRadius: 2,\n          sx: {\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            width: \"550px\",\n            // height: \"60%\",\n            bgcolor: 'background.paper',\n            border: '1px solid #000',\n            boxShadow: 24,\n            p: 4,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: this.props.onClose,\n            size: \"small\",\n            sx: {\n              position: \"absolute\",\n              top: \"3px\",\n              right: \"1px\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Close, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n              width: \"80%\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"flex-start\",\n                width: \"100%\",\n                mt: 3\n              },\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h5\",\n                sx: {\n                  mb: 2\n                },\n                children: \"Reset Password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ResetPasswordForm, {\n              email: this.state.email,\n              verCode: this.state.verCode,\n              newPassword: this.state.newPassword,\n              verPassword: this.state.verPassword,\n              onChange: this.handleChange,\n              onFinish: this.props.onClose\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nResetPasswordOverlay.propTypes = {\n  // Controls if the popup is open or not.\n  open: PropTypes.bool.isRequired,\n  // Callback function when popup is closed.\n  onClose: PropTypes.func.isRequired\n};\n\nclass ResetPasswordForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sessionID: \"\",\n      emailError: false,\n      newPasswordError: false,\n      verPasswordError: false,\n      buttonLoading: false,\n      showAlert: false,\n      alertMessage: \"\",\n      severity: \"error\"\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.checkEmail = this.checkEmail.bind(this);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.setState({\n      emailError: false,\n      newPasswordError: false,\n      verPasswordError: false\n    });\n    let url = config.baseUrl + config.api.account.resetPassword;\n    let data = {\n      email: this.props.email,\n      verCode: this.props.verCode,\n      sessionID: this.state.sessionID,\n      password: this.props.newPassword\n    }; // Check email\n\n    if (!this.checkEmail(data.email)) {\n      this.showAlert(\"Invalid email format.\");\n      return;\n    } // Check password length\n\n\n    let testFail = data.password.length < 8;\n    this.setState({\n      newPasswordError: testFail\n    });\n\n    if (testFail) {\n      this.showAlert(\"Password should be at least 8 characters long.\");\n      return;\n    } // Check password verification\n\n\n    testFail = data.password !== this.props.verPassword;\n    this.setState({\n      newPasswordError: testFail,\n      verPasswordError: testFail\n    });\n\n    if (testFail) {\n      this.showAlert(\"Passwords mismatch.\");\n      return;\n    } // Start loading animation\n\n\n    this.setState({\n      buttonLoading: true\n    }); // TODO: wait for backend API implementation\n\n    $.post(url, data, function (data, status, jqXHR) {\n      console.log(data);\n      console.log(status);\n      console.log(jqXHR);\n    }, \"json\").always(() => this.setState({\n      buttonLoading: false\n    })).fail(() => {\n      this.showAlert(\"Failed to connect to the server.\");\n    }).done(() => {\n      this.showSuccess(\"Reset password success!\");\n      setTimeout(this.props.onFinish, 2000);\n    });\n  }\n\n  showAlert(msg) {\n    this.setState({\n      showAlert: true,\n      alertMessage: msg,\n      severity: \"error\"\n    });\n  }\n\n  showSuccess(msg) {\n    this.setState({\n      showAlert: true,\n      alertMessage: msg,\n      severity: \"success\"\n    });\n  }\n\n  checkEmail(email) {\n    let res = checkEmailFormat(email);\n    this.setState({\n      emailError: !res\n    });\n    return res;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      component: \"form\",\n      onSubmit: this.handleSubmit,\n      sx: {\n        width: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        margin: \"normal\",\n        error: this.state.emailError,\n        required: true,\n        fullWidth: true,\n        name: \"email\",\n        label: \"Email\",\n        onChange: this.props.onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(VerificationCodeInput, {\n        onChange: this.props.onChange,\n        email: this.props.email,\n        checkEmailCallback: this.checkEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        margin: \"normal\",\n        error: this.state.newPasswordError,\n        required: true,\n        fullWidth: true,\n        name: \"newPassword\",\n        label: \"New Password\",\n        type: \"password\",\n        onChange: this.props.onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        margin: \"normal\",\n        error: this.state.verPasswordError,\n        required: true,\n        fullWidth: true,\n        name: \"verPassword\",\n        label: \"Verify Password\",\n        type: \"password\",\n        onChange: this.props.onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          width: \"100%\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\"\n        },\n        children: /*#__PURE__*/_jsxDEV(LoadingButton, {\n          margin: \"normal\",\n          type: \"submit\",\n          variant: \"contained\",\n          size: \"large\",\n          sx: {\n            mt: 2,\n            mb: 2\n          },\n          loading: this.state.buttonLoading,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AlertToast, {\n        alertMessage: this.state.alertMessage,\n        showAlert: this.state.showAlert,\n        severity: this.state.severity,\n        onClose: () => this.setState({\n          showAlert: false\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nResetPasswordForm.propTypes = {\n  email: PropTypes.string.isRequired,\n  verCode: PropTypes.string.isRequired,\n  newPassword: PropTypes.string.isRequired,\n  verPassword: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onFinish: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["D:/Desktop/GIT/35LGIT/BruinLink/client/src/components/resetPasswordOverlay.js"],"names":["$","React","PropTypes","Box","Button","Container","Modal","TextField","Typography","Close","VerificationCodeInput","config","checkEmailFormat","LoadingButton","AlertToast","ResetPasswordOverlay","Component","constructor","props","state","email","verCode","newPassword","verPassword","handleSubmit","bind","handleChange","event","val","target","value","name","setState","preventDefault","render","open","onClose","position","top","left","transform","width","bgcolor","border","boxShadow","p","display","flexDirection","alignItems","right","mt","mb","propTypes","bool","isRequired","func","ResetPasswordForm","sessionID","emailError","newPasswordError","verPasswordError","buttonLoading","showAlert","alertMessage","severity","checkEmail","url","baseUrl","api","account","resetPassword","data","password","testFail","length","post","status","jqXHR","console","log","always","fail","done","showSuccess","setTimeout","onFinish","msg","res","onChange","string"],"mappings":"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","sourcesContent":["import $ from \"jquery\"\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {Box, Button, Container, Modal, TextField, Typography} from \"@mui/material\";\r\nimport {Close} from \"@mui/icons-material\";\r\nimport VerificationCodeInput from \"./verificationCodeInput\";\r\nimport * as config from \"../config\"\r\nimport {checkEmailFormat} from \"../utils\";\r\nimport LoadingButton from \"@mui/lab/LoadingButton\";\r\nimport AlertToast from \"./alertToast\";\r\n\r\nexport default class ResetPasswordOverlay extends React.Component {\r\n    static propTypes = {\r\n        // Controls if the popup is open or not.\r\n        open: PropTypes.bool.isRequired,\r\n        // Callback function when popup is closed.\r\n        onClose: PropTypes.func.isRequired,\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            email: \"\",\r\n            verCode: \"\",\r\n            newPassword: \"\",\r\n            verPassword: \"\",\r\n        };\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        // Update this.state when user-input text changes\r\n        let val = event.target.value;\r\n        let name = event.target.name;\r\n\r\n        this.setState({[name]: val});\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Modal open={this.props.open} onClose={this.props.onClose}>\r\n                <Container fixed>\r\n                    <Box borderRadius={2}\r\n                         sx={{\r\n                             position: 'absolute',\r\n                             top: '50%',\r\n                             left: '50%',\r\n                             transform: 'translate(-50%, -50%)',\r\n                             width: \"550px\",\r\n                             // height: \"60%\",\r\n                             bgcolor: 'background.paper',\r\n                             border: '1px solid #000',\r\n                             boxShadow: 24,\r\n                             p: 4,\r\n\r\n                             display: \"flex\",\r\n                             flexDirection: \"column\",\r\n                             alignItems: \"center\",\r\n                         }}>\r\n\r\n                        {/* The close button */}\r\n                        <Button onClick={this.props.onClose}\r\n                                size=\"small\"\r\n                                sx={{\r\n                                    position: \"absolute\",\r\n                                    top: \"3px\",\r\n                                    right: \"1px\",\r\n                                }}>\r\n                            <Close/>\r\n                        </Button>\r\n\r\n                        <Box sx={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\",\r\n                            alignItems: \"center\",\r\n                            width: \"80%\",\r\n                        }}>\r\n\r\n                            <Box sx={{\r\n                                display: \"flex\",\r\n                                flexDirection: \"column\",\r\n                                alignItems: \"flex-start\",\r\n                                width: \"100%\",\r\n                                mt: 3,\r\n                            }}>\r\n                                <Typography variant=\"h5\" sx={{mb: 2}}>\r\n                                    Reset Password\r\n                                </Typography>\r\n                            </Box>\r\n\r\n                            <ResetPasswordForm email={this.state.email}\r\n                                               verCode={this.state.verCode}\r\n                                               newPassword={this.state.newPassword}\r\n                                               verPassword={this.state.verPassword}\r\n                                               onChange={this.handleChange}\r\n                                               onFinish={this.props.onClose}/>\r\n                        </Box>\r\n                    </Box>\r\n                </Container>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass ResetPasswordForm extends React.Component {\r\n    static propTypes = {\r\n        email: PropTypes.string.isRequired,\r\n        verCode: PropTypes.string.isRequired,\r\n        newPassword: PropTypes.string.isRequired,\r\n        verPassword: PropTypes.string.isRequired,\r\n        onChange: PropTypes.func.isRequired,\r\n        onFinish: PropTypes.func.isRequired,\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            sessionID: \"\",\r\n\r\n            emailError: false,\r\n            newPasswordError: false,\r\n            verPasswordError: false,\r\n\r\n            buttonLoading: false,\r\n\r\n            showAlert: false,\r\n            alertMessage: \"\",\r\n            severity: \"error\",\r\n        }\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.checkEmail = this.checkEmail.bind(this);\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        this.setState({emailError: false, newPasswordError: false, verPasswordError: false});\r\n\r\n        let url = config.baseUrl + config.api.account.resetPassword;\r\n        let data = {\r\n            email: this.props.email,\r\n            verCode: this.props.verCode,\r\n            sessionID: this.state.sessionID,\r\n            password: this.props.newPassword\r\n        };\r\n\r\n        // Check email\r\n        if (!this.checkEmail(data.email)) {\r\n            this.showAlert(\"Invalid email format.\");\r\n            return;\r\n        }\r\n\r\n        // Check password length\r\n        let testFail = data.password.length < 8;\r\n        this.setState({newPasswordError: testFail});\r\n        if (testFail) {\r\n            this.showAlert(\"Password should be at least 8 characters long.\");\r\n            return;\r\n        }\r\n\r\n        // Check password verification\r\n        testFail = data.password !== this.props.verPassword;\r\n        this.setState({newPasswordError: testFail, verPasswordError: testFail});\r\n        if (testFail) {\r\n            this.showAlert(\"Passwords mismatch.\");\r\n            return;\r\n        }\r\n\r\n        // Start loading animation\r\n        this.setState({buttonLoading: true});\r\n\r\n        // TODO: wait for backend API implementation\r\n        $.post(url, data, function (data, status, jqXHR) {\r\n            console.log(data);\r\n            console.log(status);\r\n            console.log(jqXHR);\r\n        }, \"json\")\r\n            .always(() => this.setState({buttonLoading: false}))\r\n            .fail(() => {\r\n                this.showAlert(\"Failed to connect to the server.\");\r\n            })\r\n            .done(() => {\r\n                this.showSuccess(\"Reset password success!\")\r\n                setTimeout(this.props.onFinish, 2000);\r\n            });\r\n    }\r\n\r\n    showAlert(msg) {\r\n        this.setState({\r\n            showAlert: true,\r\n            alertMessage: msg,\r\n            severity: \"error\",\r\n        });\r\n    }\r\n\r\n    showSuccess(msg) {\r\n        this.setState({\r\n            showAlert: true,\r\n            alertMessage: msg,\r\n            severity: \"success\",\r\n        });\r\n    }\r\n\r\n    checkEmail(email) {\r\n        let res = checkEmailFormat(email);\r\n        this.setState({emailError: !res});\r\n        return res;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Box component=\"form\"\r\n                 onSubmit={this.handleSubmit}\r\n                 sx={{width: \"100%\"}}>\r\n                <TextField\r\n                    margin=\"normal\"\r\n                    error={this.state.emailError}\r\n                    required\r\n                    fullWidth\r\n                    name=\"email\"\r\n                    label=\"Email\"\r\n                    onChange={this.props.onChange}\r\n                />\r\n\r\n                <VerificationCodeInput\r\n                    onChange={this.props.onChange}\r\n                    email={this.props.email}\r\n                    checkEmailCallback={this.checkEmail}/>\r\n\r\n                <TextField\r\n                    margin=\"normal\"\r\n                    error={this.state.newPasswordError}\r\n                    required\r\n                    fullWidth\r\n                    name=\"newPassword\"\r\n                    label=\"New Password\"\r\n                    type=\"password\"\r\n                    onChange={this.props.onChange}\r\n                />\r\n\r\n                <TextField\r\n                    margin=\"normal\"\r\n                    error={this.state.verPasswordError}\r\n                    required\r\n                    fullWidth\r\n                    name=\"verPassword\"\r\n                    label=\"Verify Password\"\r\n                    type=\"password\"\r\n                    onChange={this.props.onChange}\r\n                />\r\n\r\n                <Box sx={{width: \"100%\", display: \"flex\", flexDirection: \"column\", alignItems: \"center\"}}>\r\n                    <LoadingButton\r\n                        margin=\"normal\"\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        sx={{mt: 2, mb: 2}}\r\n                        loading={this.state.buttonLoading}\r\n                    >\r\n                        <Typography variant=\"h6\">Submit</Typography>\r\n                    </LoadingButton>\r\n                </Box>\r\n\r\n                <AlertToast alertMessage={this.state.alertMessage}\r\n                            showAlert={this.state.showAlert}\r\n                            severity={this.state.severity}\r\n                            onClose={() => this.setState({showAlert: false})}/>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}